// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'types/quest.dart';
import 'types/stage.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5380418050122829891),
      name: 'Quest',
      lastPropertyId: const IdUid(5, 7893136813472983965),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1874512686789274164),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 479245346904176476),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3631301426597161070),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 784772472916591986),
            name: 'selected',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7893136813472983965),
            name: 'complete',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'stages', srcEntity: 'Stage', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 7889764529960281269),
      name: 'Stage',
      lastPropertyId: const IdUid(6, 5917905376672486480),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5211540908415819314),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3949507339579166954),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2892481441390098206),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 72199161595285829),
            name: 'complete',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4845270606970171482),
            name: 'selected',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5917905376672486480),
            name: 'questId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 3034589554022003860),
            relationTarget: 'Quest')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 7889764529960281269),
      lastIndexId: const IdUid(1, 3034589554022003860),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Quest: EntityDefinition<Quest>(
        model: _entities[0],
        toOneRelations: (Quest object) => [],
        toManyRelations: (Quest object) => {
              RelInfo<Stage>.toOneBacklink(
                      6, object.id, (Stage srcObject) => srcObject.quest):
                  object.stages
            },
        getId: (Quest object) => object.id,
        setId: (Quest object, int id) {
          object.id = id;
        },
        objectToFB: (Quest object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.created.millisecondsSinceEpoch);
          fbb.addBool(3, object.selected);
          fbb.addBool(4, object.complete);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = Quest(id: idParam)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..created = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..selected =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false)
            ..complete =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          InternalToManyAccess.setRelInfo<Quest>(
              object.stages,
              store,
              RelInfo<Stage>.toOneBacklink(
                  6, object.id, (Stage srcObject) => srcObject.quest));
          return object;
        }),
    Stage: EntityDefinition<Stage>(
        model: _entities[1],
        toOneRelations: (Stage object) => [object.quest],
        toManyRelations: (Stage object) => {},
        getId: (Stage object) => object.id,
        setId: (Stage object, int id) {
          object.id = id;
        },
        objectToFB: (Stage object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.created.millisecondsSinceEpoch);
          fbb.addBool(3, object.complete);
          fbb.addBool(4, object.selected);
          fbb.addInt64(5, object.quest.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = Stage(id: idParam)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..created = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..complete =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false)
            ..selected =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          object.quest.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.quest.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Quest] entity fields to define ObjectBox queries.
class Quest_ {
  /// see [Quest.id]
  static final id = QueryIntegerProperty<Quest>(_entities[0].properties[0]);

  /// see [Quest.name]
  static final name = QueryStringProperty<Quest>(_entities[0].properties[1]);

  /// see [Quest.created]
  static final created =
      QueryIntegerProperty<Quest>(_entities[0].properties[2]);

  /// see [Quest.selected]
  static final selected =
      QueryBooleanProperty<Quest>(_entities[0].properties[3]);

  /// see [Quest.complete]
  static final complete =
      QueryBooleanProperty<Quest>(_entities[0].properties[4]);
}

/// [Stage] entity fields to define ObjectBox queries.
class Stage_ {
  /// see [Stage.id]
  static final id = QueryIntegerProperty<Stage>(_entities[1].properties[0]);

  /// see [Stage.name]
  static final name = QueryStringProperty<Stage>(_entities[1].properties[1]);

  /// see [Stage.created]
  static final created =
      QueryIntegerProperty<Stage>(_entities[1].properties[2]);

  /// see [Stage.complete]
  static final complete =
      QueryBooleanProperty<Stage>(_entities[1].properties[3]);

  /// see [Stage.selected]
  static final selected =
      QueryBooleanProperty<Stage>(_entities[1].properties[4]);

  /// see [Stage.quest]
  static final quest =
      QueryRelationToOne<Stage, Quest>(_entities[1].properties[5]);
}
